buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:2.1.1.RELEASE')
    }
}

repositories {
    mavenCentral()
}

apply plugin:'java'
apply plugin:'eclipse'
apply plugin:'org.springframework.boot'
apply plugin:'io.spring.dependency-management'

sourceCompatibility=JavaVersion.VERSION_1_10
targetCompatibility=JavaVersion.VERSION_1_10

dependencies {
    compileOnly('org.projectlombok:lombok:1.18.4')
    annotationProcessor 'org.projectlombok:lombok:1.18.4'
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-devtools')
    compile('io.jsonwebtoken:jjwt:0.9.1')
    compile('javax.xml.bind:jaxb-api:2.4.0-b180830.0359')
    compile('org.glassfish.jaxb:jaxb-runtime:2.3.0')
    compile('org.hibernate:hibernate-envers')
    compile('org.liquibase:liquibase-core')
    compile('org.postgresql:postgresql')
    compile('io.springfox:springfox-swagger2:2.9.2')
    compile('io.springfox:springfox-swagger-ui:2.9.2')
    testCompile('junit:junit')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

sourceSets {
    testIntegration {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/testIntegration/java')
        }
        resources.srcDir file('src/testIntegration/resources')
    }
}

configurations {
    testIntegrationCompile.extendsFrom testCompile
    testIntegrationRuntime.extendsFrom testRuntime
}

bootRun {
	sourceResources sourceSets.main
}


bootJar {
    baseName='server'
    version= 'git describe'.execute().text.trim()
    manifest {
        attributes('Implementation-Title':baseName,
                   'Implementation-Version':version)
    }
}

task testIntegration(type: Test) {
    description = 'Runs the integration tests'
    group = 'verification'
    testClassesDirs = sourceSets.testIntegration.output.classesDirs
    classpath = sourceSets.testIntegration.runtimeClasspath
    mustRunAfter test
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

check.dependsOn testIntegration

wrapper {
    gradleVersion = '5.0' 
}

